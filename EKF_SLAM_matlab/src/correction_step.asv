function [mu, sigma, observedLandmarks] = correction_step(mu, sigma, z, observedLandmarks)
% Updates the belief, i. e., mu and sigma after observing landmarks, according to the sensor model
% The employed sensor model measures the range and bearing of a landmark
% mu: 2N+3 x 1 vector representing the state mean.
% The first 3 components of mu correspond to the current estimate of the robot pose [x; y; theta]
% The current pose estimate of the landmark with id = j is: [mu(2*j+2); mu(2*j+3)]
% sigma: 2N+3 x 2N+3 is the covariance matrix
% z: struct array containing the landmark observations.
% Each observation z(i) has an id z(i).id, a range z(i).range, and a bearing z(i).bearing
% The vector observedLandmarks indicates which landmarks have been observed
% at some point by the robot.
% observedLandmarks(j) is false if the landmark with id = j has never been observed before.

% Number of measurements in this time step
m = size(z, 2);
N = (size(sigma,1)-3)/2;

% Z: vectorized form of all measurements made in this time step: [range_1; bearing_1; range_2; bearing_2; ...; range_m; bearing_m]
% ExpectedZ: vectorized form of all expected measurements in the same form.
% They are initialized here and should be filled out in the for loop below
Z = zeros(m*2, 1);
Z_hat = zeros(m*2, 1);

% Iterate over the measurements and compute the H matrix
% (stacked Jacobian blocks of the measurement function)
% H will be 2m x 2N+3
H = [];

for i = 1:m
	% Get the id of the landmark corresponding to the i-th observation
	landmarkId = z(i).id;
	% If the landmark is obeserved for the first time:
	if ~observedLandmarks(landmarkId)
		% Initialize its pose in mu based on the measurement and the current robot pose:
        bearing = z(landmarkId).bearing;
		mu(2+2*i) = mu(1) + z(landmarkId).range * cos(bearing + mu(3));
        mu(3+2*i) = mu(2) + z(landmarkId).range * sin(bearing + mu(3));
		% Indicate in the observedLandmarks vector that this landmark has been observed
		observedLandmarks(landmarkId) = true;
    end

	% Add the landmark measurement to the Z vector
	Z(2*i-1) = z(landmarkId).range;
    Z(2*i) = z(landmarkId).bearing;

	% Z_hat = h(x)
    delta = [mu(2+2*landmarkId)-mu(1); mu(3+2*i)-mu(2)];
    q = norm(delta);
    qq = q*q;
    Z_hat(2*i-1) = q;
    Z_hat(2*i) = atan2(delta(2), delta(1)) - mu(3);

	% Compute the Hi of the measurement function h for this observation
	H3 = [-delta(1)/q -delta(2)/q 0; 
        delta(2)/qq -delta(1)/qq -1];
    H2 = [delta(1)/q delta(2)/q;
        -delta(2)/qq delta(1)/qq];
    Hi = zeros(2, 2*N+3);
    Hi(:, 1:3) = H3;
    Hi(:, 2+2*i:3+2*i) = H2;

	% Augment H with the new Hi
	H = [H;Hi];	
end

% Construct the sensor noise matrix Q
measurement_noise = 0.01;
Q = measurement_noise * eye(2*m);

% Compute the Kalman gain
K = sigma * H' * inv(H*sigma*H' + Q);

% Compute the difference between the expected and recorded measurements.
% Remember to normalize the bearings after subtracting!
% (hint: use the normalize_all_bearings function available in tools)
error = normalize_all_bearings(Z-Z_hat);

% Finish the correction step by computing the new mu and sigma.
% Normalize theta in the robot pose.
mu = mu + K*error;
sigma = (eye(2*N+3) - K*H)*sigma;
mu(3) = normalize_angle(mu(3));


end
